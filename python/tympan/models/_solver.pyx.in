"""solver models for Code_TYMPAN
"""

import cython as cy

import numpy as np
cimport numpy as np

from tympan.models cimport _common as tycommon
from tympan._core cimport unique_ptr, shared_ptr


class ModelHandler(object):
    """ Ties together a SolverProblem and the converter used to build it from
    the business model (allows to send back solver results to the business model)/
    """

    def __init__(self, model, converter):
        self.model = model
        self._converter = converter


cdef class ProblemModel:
    """Solver model"""

    def __cinit__(self):
        self.thisptr = shared_ptr[AcousticProblemModel](new AcousticProblemModel())

    @property
    def npoints(self):
        """Return the number of mesh nodes of the model"""
        assert self.thisptr.get() != NULL
        return self.thisptr.get().npoints()

    @property
    def ntriangles(self):
        """Return the number of mesh triangles of the model"""
        assert self.thisptr.get() != NULL
        return self.thisptr.get().ntriangles()

    @property
    def nmaterials(self):
        """Return the number of acoustic materials of the model"""
        assert self.thisptr.get() != NULL
        return self.thisptr.get().nmaterials()

    @cy.locals(spectrum_values=np.ndarray)
    def add_source(self, position, spectrum_values, shift):
        """Add an acoustic source to the model

        position is a (x, y, z) tuple; spectrum_values is a np array containing
        the DB values of a power spectrum, shift is the number of the first
        frequence for which a DB value is given (frequences start at 16 Hz and
        end at 16000Hz, 31 values in total).
        Add the corresponding acoustic source to the solver model (the acoustic
        source is created with a SphericalFaceDirectivity)
        """
        # position
        pos = cy.declare(tycommon.OPoint3D)
        pos = tycommon.OPoint3D(position[0], position[1], position[2])
        # spectrum
        nb_val = spectrum_values.shape[0]
        spec = cy.declare(tycommon.OSpectre)
        spec = tycommon.OSpectre(<double *> spectrum_values.data, nb_val, shift)
        spec.setEtat(tycommon.SPECTRE_ETAT_DB)
        spec.setType(tycommon.SPECTRE_TYPE_LW)
        # directivity
        pdirectivity = cy.declare(cy.pointer(SourceDirectivityInterface))
        pdirectivity = new SphericalSourceDirectivity()
        source_idx = self.thisptr.get().make_source(pos, spec.toGPhy(), pdirectivity)
        return source_idx

    @property
    def nsources(self):
        """Return the number of acoustic sources involved in the model"""
        assert self.thisptr.get() != NULL
        return self.thisptr.get().nsources()

    @property
    def nreceptors(self):
        """Return the number of acoustic receptors involved in the model"""
        assert self.thisptr.get() != NULL
        return self.thisptr.get().nreceptors()

    def source(self, idx):
        """Return the acoustic source (SolverSource object) of index 'idx'"""
        assert self.thisptr.get() != NULL
        source = SolverSource()
        source.thisptr = cy.address(self.thisptr.get().source(idx))
        return source

    @property
    def sources(self):
        """Return all the acoustic sources of the model"""
        assert self.thisptr.get() != NULL
        sources = []
        for i in xrange(self.nsources):
            source = SolverSource()
            source.thisptr = cy.address(self.thisptr.get().source(i))
            sources.append(source)
        return sources

    def receptor(self, idx):
        """Return the acoustic receptor (SolverReceptor object) of index 'idx'
        """
        assert self.thisptr.get() != NULL
        receptor = SolverReceptor()
        receptor.thisptr = cy.address(self.thisptr.get().receptor(idx))
        return receptor

    @property
    def receptors(self):
        """Return all the acoustic receptors of the model"""
        assert self.thisptr.get() != NULL
        receptors = []
        for i in xrange(self.nreceptors):
            receptor = SolverReceptor()
            receptor.thisptr = cy.address(self.thisptr.get().receptor(i))
            receptors.append(receptor)
        return receptors

    def export_triangular_mesh(self):
        """ Build a triangular mesh from the acoustic problem model.

        Return two nparrays:
            * 'nodes': an array of nodes (of dimension 'npoints'X3), where
            each line stands for a node and contains 3 coordinates)
            * 'triangles': an array of triangles (of dimension 'ntriangles'X3),
            where each line stands for a triangle and contains the indices of
            its 3 vertices in the 'nodes' array.
        """
        assert self.thisptr.get() != NULL
        nb_elts = cy.declare(cy.uint)
        actri = cy.declare(cy.pointer(AcousticTriangle))
        nb_elts = self.thisptr.get().ntriangles()
        triangles = np.empty([nb_elts, 3], dtype=int)
        for i in xrange(nb_elts):
            actri = cy.address(self.thisptr.get().triangle(i))
            triangles[i] = [actri.n[0], actri.n[1], actri.n[2]]
        point = cy.declare(cy.pointer(tycommon.OPoint3D))
        nb_elts = self.thisptr.get().npoints()
        nodes = np.empty([nb_elts, 3])
        for i in xrange(nb_elts):
            point = cy.address(self.thisptr.get().node(i))
            nodes[i] = [point._x, point._y, point._z]
        return (nodes, triangles)


cdef class ResultModel:
    """Results of a computation ran by a solver on a solver model"""

    def __cinit__(self):
        self.thisptr = shared_ptr[AcousticResultModel](new AcousticResultModel())

    def spectrum(self, id_receptor, id_source):
        """Return the power spectrum received by a receptor from a source
        """
        spec = cy.declare(tycommon.OSpectre)
        spec = self.thisptr.get().get_data().element(id_receptor, id_source)
        return tycommon.ospectre2spectrum(spec)


cdef class Solver:

    @cy.locals(model=ProblemModel)
    @cy.returns((bool, ResultModel))
    def solve_problem(self, model):
        """Run a computation based on the solver model given in argument

        Raises a RuntimeError in case of computation failure.
        """
        result = ResultModel()
        if not self.thisptr.solve(model.thisptr.get()[0],
                                  result.thisptr.get()[0]):
            raise RuntimeError(
                'Computation failed (C++ SolverInterface::solve() method '
                'returned false)')
        return result

    def purge(self):
        """Purge solver from its previous results"""
        self.thisptr.purge()


cdef class SolverSource:
    thisptr = cy.declare(cy.pointer(AcousticSource))

    def __cinit__(self):
        self.thisptr = NULL

    @property
    def position(self):
        """Return the acoustic source position (as a 'Point3D' object)"""
        assert self.thisptr != NULL
        return tycommon.opoint3d2point3d(self.thisptr.position)

    @property
    def spectrum(self):
        """Return the acoustic spectrum of the Source (dB scale, power spectrum)
        """
        assert self.thisptr != NULL
        return tycommon.ospectre2spectrum(self.thisptr.spectrum)

    def value(self, freq):
        """The spectrum value corresponding to the 'freq' frequency (linear, power)"""
        return self.thisptr.spectrum.getValueReal(freq)


cdef class SolverReceptor:
    thisptr = cy.declare(cy.pointer(AcousticReceptor))

    def __cinit__(self):
        self.thisptr = NULL

    @property
    def position(self):
        """Return the acoustic source position (as a 'Point3D' object)"""
        assert self.thisptr != NULL
        return tycommon.opoint3d2point3d(self.thisptr.position)

